{
  parserClass="com.cedricziel.idea.fluid.lang.parser.FluidParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Fluid"
  psiImplClassSuffix="Impl"
  psiPackage="com.cedricziel.idea.fluid.lang.psi"
  psiImplPackage="com.cedricziel.idea.fluid.lang.psi.impl"

  psiImplUtilClass="com.cedricziel.idea.fluid.lang.psi.impl.FluidPsiImplUtil"

  elementTypeHolderClass="com.cedricziel.idea.fluid.lang.psi.FluidTypes"
  elementTypeClass="com.cedricziel.idea.fluid.lang.psi.FluidElementType"
  tokenTypeClass="com.cedricziel.idea.fluid.lang.psi.FluidTokenType"

  tokens = [
    EXPR_START='{'
    EXPR_END='}'

    COLON=':'
    DOT='.'
    COMMA=','
    ARROW='->'

    LEFT_PARENTH='('
    RIGHT_PARENTH=')'

    ASSIGN='='
    AND='&&'
    OR='||'
    NOT='!'
    TERNARY_QUESTION_OP='?'
    TERNARY_BRANCHES_OP=':'

    LT='<'
    LEQ='<='
    GEQ='>='
    GT='>'
    EQ='=='
    NEQ='!='

    MUL                  = '*'
    DIV                  = '/'
    MOD                  = '%'
    PLUS                 = '+'
    MINUS                = '-'
    TERNARY              = '?'

    INTEGER_NUMBER='regexp:0|[1-9]\d*'
    FLOAT_NUMBER='regexp:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+'

    SINGLE_QUOTE="'"
    DOUBLE_QUOTE='"'

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'

    COMMENT_START='<!--/*'
    COMMENT_END='*/-->'
    COMMENT_CONTENT='regexp:.*'

    COLON=':'

    NS='regexp:[a-zA-Z0-9]+'
    NAMESPACE_FQN='regexp:[a-zA-Z\\\]*]'

    NAMESPACE = 'namespace'
    AS = 'as'
  ]

  extends("string_literal|number_literal|boolean_literal|null_literal")=literal

  extends(".*Statement")=Statement
  extends(".*Expr")=Expression
  consumeTokenMethod(".*Expr")="consumeTokenFast"

  pin("(.)+Statement$") = 2
}

File ::= StatementList

private StatementList ::= (  TEXT+ | NamespaceStatement | InlineStatement )*

fake Statement ::=

template_comment ::= "<!--/*" COMMENT_CONTENT? "*/-->"

NamespaceStatement ::= '{' 'namespace' NamespaceAlias '=' ViewHelperNamespace '}' {
  pin=2
  methods = [
    getAlias
    getNamespace
  ]
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidNamespaceStatementMixin"
  implements = "com.cedricziel.idea.fluid.lang.psi.FluidAccessibleNamespaceStatement"
}
private NamespaceAlias ::= NAMESPACE_ALIAS
ViewHelperNamespace ::= NS ('\' NS)*

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING {
  methods=[
    getTextFragments
    getValue
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidStringLiteralMixin"
  implements = "com.cedricziel.idea.fluid.lang.psi.StringLiteral"
}

number_literal ::= NUMBER {
  methods=[
    NUMBER=""
    getValue
  ]
}

boolean_literal ::= TRUE | FALSE {
  methods=[
    getValue
  ]
}

null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[
    isQuotedString
  ]
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidLiteralMixin"
}

FieldChain      ::= '.' IDENTIFIER FieldChain? {
  implements="com.cedricziel.idea.fluid.lang.psi.FluidNamedElement"
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidNamedElementImpl"
}
FieldExpr       ::= IDENTIFIER {
  implements="com.cedricziel.idea.fluid.lang.psi.FluidNamedElement"
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidNamedElementImpl"
}
FieldChainExpr  ::= Expression FieldChain

Expression ::=   OrExpr
               | AndExpr
               | ConditionalExpr
               | MultiplicativeExpr
               | AdditiveExpr
               | NotExpr            // Supported?
               | TernaryExpr
               | CastExpr
               | ViewHelperGroup
               | ArrayCreationExpr
               | FieldGroup
               | PrimaryGroup

TernaryExpr ::= Expression '?' (Expression) ':' Expression { pin=1 } // Is the elvis operator supported?

private rel_op  ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private add_op  ::= '+' | '-'
private mul_op  ::= '*' | '%' | '/'
private as_op   ::= AS

NotExpr            ::=    '!' Expression { pin=1 }
OrExpr             ::=    Expression '||' Expression
AndExpr            ::=    Expression '&&' Expression
ConditionalExpr    ::=    Expression rel_op Expression
MultiplicativeExpr ::=    Expression mul_op Expression
AdditiveExpr       ::=    Expression add_op Expression
CastExpr           ::=    Expression as_op IDENTIFIER

ViewHelperExpr     ::=    boundNamespace ':' viewHelperReference '(' viewHelperArgumentList ')' {
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidViewHelperNodeMixin"
  implements="com.cedricziel.idea.fluid.lang.psi.FluidPresentableName"
  pin=4
}
viewHelperReference ::= IDENTIFIER ('.' viewHelperPath)* {
  implements="com.cedricziel.idea.fluid.lang.psi.FluidNamedElement"
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidNamedElementImpl"
}
private viewHelperPath ::= IDENTIFIER ( '.' viewHelperPath)*
boundNamespace ::= IDENTIFIER

viewHelperArgumentList ::= (viewHelperArgument ( ',' viewHelperArgument )*)? {
  mixin="com.cedricziel.idea.fluid.lang.psi.impl.FluidArgumentListMixin"
  implements="com.cedricziel.idea.fluid.lang.psi.ArgumentList"
  methods = [
    hasArgument
    getArgument
  ]
}
viewHelperArgument ::= argumentKey ':' argumentValue {
  pin=2
}
argumentKey ::= IDENTIFIER

argumentValue ::= literal | FieldChainExpr | FieldExpr | ArrayCreationExpr

StringExpr     ::= string_literal

NumberExpr     ::= NUMBER

ParenthesesExpr     ::= '(' InlineChain ')' { pin=1 }

ArrayCreationExpr ::= ArrayElement ( ',' ArrayElement )* {
  pin=1
}

private NestedArray ::= '{' ArrayElement ( ',' ArrayElement )* '}' {
  pin=2
}

private ArrayElement        ::= ArrayKey ':' ArrayValue {
  pin=2
}

ArrayKey ::= IDENTIFIER | literal
ArrayValue ::= literal | FieldExpr | NestedArray

InlineChain      ::= Expression Chain? {
 pin=1
 recoverWhile=inline_chain_recover
}
private inline_chain_recover ::= !('}')

Chain          ::= '->' ViewHelperExpr Chain? { pin=1 }

private ViewHelperGroup ::= ViewHelperExpr
private FieldGroup ::=   FieldExpr   | FieldChainExpr
private PrimaryGroup ::= NumberExpr | StringExpr | ParenthesesExpr | ArrayCreationExpr

InlineStatement ::= '{' InlineChain '}' {
  pin=2
}

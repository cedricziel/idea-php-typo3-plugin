import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id "org.jetbrains.intellij" version "0.7.2" apply false
    id "org.jetbrains.grammarkit" version "${grammarKitPluginVersion}" apply false
    id 'org.jetbrains.changelog' version '1.1.1'
}

repositories {
    mavenCentral()
    jcenter()
}

def htmlFixer = { htmlFile -> file(htmlFile).text.replace('<html>', '').replace('</html>', '') }
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

group pluginGroup

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.changelog'

    sourceCompatibility = javaVersion
    targetCompatibility = javaTargetVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    version = pluginVersion
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'
    apply plugin: "org.jetbrains.grammarkit"

    repositories {
        mavenCentral()
        jcenter()
    }

    changelog {
        version = pluginVersion
        path = "${project.rootProject.projectDir}/CHANGELOG.md"
        header = { "[$version] - ${getDate()}" }
        headerParserRegex = ~/\d+\.\d+/
        itemPrefix = "-"
        keepUnreleasedSection = true
        unreleasedTerm = "[Unreleased]"
        groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
    }

    intellij {
        version ideaVersion
        updateSinceUntilBuild true

        tasks {
            "buildSearchableOptions" {
                enabled = false
            }
        }
    }

    publishPlugin {
        channels 'nightly'
        token System.getenv('IJ_REPO_TOKEN')
    }

    patchPluginXml {
        if (customSinceBuild) {
            sinceBuild customSinceBuild
        }
        if (customUntilBuild) {
            untilBuild customUntilBuild
        }

        changeNotes({ changelog.getUnreleased().toHTML() })
        pluginDescription htmlFixer("${project.projectDir}/src/main/resources/META-INF/description.html")
    }

    grammarKit {
        jflexRelease = jFlexRelease
    }

    runPluginVerifier {
        ideVersions pluginVerifierIdeVersions
    }

    test.testLogging.exceptionFormat = TestExceptionFormat.FULL
}

wrapper {
    gradleVersion '6.2'
}

test.testLogging.exceptionFormat = TestExceptionFormat.FULL

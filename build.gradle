import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
    repositories {
        mavenCentral()

        maven { url "https://jetbrains.bintray.com/intellij-third-party-dependencies" }

        maven { url 'https://jitpack.io' }
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }

    dependencies {
        classpath "com.github.JetBrains:gradle-grammar-kit-plugin:${grammarKitPluginVersion}"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.4.14"
    id 'com.palantir.git-version' version "0.11.0"
}

def details = versionDetails()

group 'com.cedricziel.idea'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = javaVersion
    targetCompatibility = javaTargetVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    if (details.isCleanTag) {
        version = "$customSinceBuild.${details.lastTag.substring(3)}"
    } else {
        version = "$customSinceBuild.${details.lastTag.substring(3)}.${details.gitHash}-SNAPSHOT"
    }

    intellij {
        version ideaVersion
        updateSinceUntilBuild true
    }

    patchPluginXml {
        if (customSinceBuild) {
            sinceBuild customSinceBuild
        }
        if (customUntilBuild) {
            untilBuild customUntilBuild
        }
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.grammarkit'
    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    intellij {
        version ideaVersion
        sameSinceUntilBuild Boolean.valueOf(isEAP)
        updateSinceUntilBuild true
    }

    publishPlugin {
        token System.getenv('IJ_REPO_TOKEN')
    }

    patchPluginXml {
        if (customSinceBuild) {
            sinceBuild customSinceBuild
        }
        if (customUntilBuild) {
            untilBuild customUntilBuild
        }
    }

    grammarKit {
        grammarKitRelease = grammarKitRelease
        jflexRelease = jFlexRelease
    }

    test.testLogging.exceptionFormat = TestExceptionFormat.FULL
}

wrapper {
    gradleVersion '4.8'
}

test.testLogging.exceptionFormat = TestExceptionFormat.FULL
